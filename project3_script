#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Dec  3 10:44:58 2024

@author: coledlocks
"""

# importing related packages
import project3_module as p3m
import numpy as np
from matplotlib import pyplot as plt

#%% Part 1 

fs = 500 # sampling rate

# loading the data
rest_data, rest_time = p3m.load_data('rest.txt', fs)
relax_data, relax_time = p3m.load_data('relax.txt', fs)
mentalstress_data, mentalstress_time = p3m.load_data('mentalstress.txt', fs)
wallsit_data, wallsit_time = p3m.load_data('wallsit.txt', fs)

# trimming the data to 5 seconds
rest_data = p3m.trim_data_to_5_seconds(rest_data)
rest_time = p3m.trim_data_to_5_seconds(rest_time)

relax_data = p3m.trim_data_to_5_seconds(relax_data)
relax_time = p3m.trim_data_to_5_seconds(relax_time)

mentalstress_data = p3m.trim_data_to_5_seconds(mentalstress_data)
mentalstress_time = p3m.trim_data_to_5_seconds(mentalstress_time)

wallsit_data = p3m.trim_data_to_5_seconds(wallsit_data)
wallsit_time = p3m.trim_data_to_5_seconds(wallsit_time)

# concatenating the data
total_data = np.concatenate((rest_data, relax_data, mentalstress_data, wallsit_data))
total_time = np.arange(0, len(total_data)/fs, 1/fs)

# Plots 
plt.figure(1, clear = True) 
plt.plot(rest_time, rest_data)

plt.figure(2, clear = True) 
plt.plot(relax_time, relax_data)

plt.figure(3, clear = True )
plt.plot(mentalstress_time, mentalstress_data)

plt.figure(4, clear = True) 
plt.plot(wallsit_time, wallsit_data)

plt.figure(5, clear = True)
plt.plot(total_time, total_data)

#%% PART 2: FILTERING

# declare filter parameters
numtaps = 500
cutoff_frequency = (0.5, 47.5)
window = 'hann'
filter_type = 'bandpass'

# get filter coefficients 
h_t = signal.firwin(numtaps, cutoff_frequency, window=window, pass_zero=filter_type, fs=fs)
t_filter = np.arange(0, len(h_t)/fs, 1/fs)
H_f = np.fft.rfft(h_t)
f_filter = np.fft.rfftfreq(len(h_t), 1/fs)

# demean data and apply filter
rest_data_demeaned = rest_data - np.mean(rest_data)
filtered_rest = np.convolve(rest_data_demeaned, h_t, mode='same')

relax_data_demeaned = relax_data - np.mean(relax_data)
filtered_relax = np.convolve(relax_data_demeaned, h_t, mode='same')

mentalstress_data_demeaned = mentalstress_data - np.mean(mentalstress_data)
filtered_mentalstress = np.convolve(mentalstress_data_demeaned, h_t, mode='same')

wallsit_data_demeaned = wallsit_data - np.mean(wallsit_data)
filtered_wallsit = np.convolve(wallsit_data_demeaned, h_t, mode='same')

# converting raw data to freq 
rest_freq = np.fft.rfft(rest_data_demeaned)
f = np.fft.rfftfreq(len(rest_data),1/fs)

# plotting
plt.figure(1, clear=True)

# raw data in time domain
plt.subplot(321)
plt.plot(rest_time, rest_data_demeaned)
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')
plt.title('Raw Data (Demeaned)')

# raw data in frequency domain
plt.subplot(322)
plt.plot(f, np.abs(rest_freq))
plt.xlabel('Frequency (Hz)')
plt.ylabel('Magnitude')
plt.title('Signal in Frequency Domain')

# filter in time domain
plt.subplot(323)
plt.plot(t_filter, h_t)
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')
plt.title('Impulse Response')

# filter in frequency domain
plt.subplot(324)
plt.plot(f_filter, np.abs(H_f))
plt.xlabel('Frequency (Hz)')
plt.ylabel('Magnitude')
plt.title('Frequency Response')

# filtered data in time domain
plt.subplot(325)
plt.plot(rest_time, filtered_rest, color='orange')
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')
plt.title('Filtered Data')

plt.tight_layout()
plt.show()

#%% Part 3 
# decimate 
decimation_factor = 2
decimated_dt = 1/(fs/decimation_factor)

# decimate signals
decimated_signal_rst = p3m.decimate_data(filtered_rest, decimation_factor)
original_time_rst = np.arange(0, len(filtered_rest)/fs, 1/fs)
decimated_time_rst = np.arange(0, len(decimated_signal_rst)/(fs/decimation_factor), decimated_dt)

decimated_signal_rlx = p3m.decimate_data(filtered_relax, decimation_factor)
original_time_rlx = np.arange(0, len(filtered_relax)/fs, 1/fs)
decimated_time_rlx = np.arange(0, len(decimated_signal_rlx)/(fs/decimation_factor), decimated_dt)

decimated_signal_ms = p3m.decimate_data(filtered_mentalstress, decimation_factor)
original_time_ms = np.arange(0, len(filtered_mentalstress)/fs, 1/fs)
decimated_time_ms = np.arange(0, len(decimated_signal_ms)/(fs/decimation_factor), decimated_dt)

decimated_signal_ws = p3m.decimate_data(filtered_wallsit, decimation_factor)
original_time_ws = np.arange(0, len(filtered_wallsit)/fs, 1/fs)
decimated_time_ws = np.arange(0, len(decimated_signal_ws)/(fs/decimation_factor), decimated_dt)

# Define start and end points of template 
start_index = 2 # Start index of the segment
end_index = 3 # End index of the segment

# Extract a segment to be used as the template
template_rst = filtered_rest[start_index:end_index]
template_rlx = filtered_relax[start_index:end_index]
template_ms = filtered_mentalstress[start_index:end_index]
template_ws = filtered_wallsit[start_index:end_index]

# Find cross-correlation between raw signal and normal beat template 
template_match_rst = p3m.get_template_match(decimated_signal_rst, template_rst)
template_match_time_rst = np.arange(0, len(template_match_rst))/(fs/decimation_factor)

template_match_rlx = p3m.get_template_match(decimated_signal_rlx, template_rlx)
template_match_time_rlx = np.arange(0, len(template_match_rlx))/(fs/decimation_factor)

template_match_ms = p3m.get_template_match(decimated_signal_ms, template_ms)
template_match_time_ms = np.arange(0, len(template_match_ms))/(fs/decimation_factor)

template_match_ws = p3m.get_template_match(decimated_signal_ws, template_ws)
template_match_time_ws = np.arange(0, len(template_match_ws))/(fs/decimation_factor)

# set threshold 
threshold_rst = .04
threshold_rlx = .1
threshold_ms = .004
threshold_ws = .01 

beat_samples_rst = p3m.predict_beat_times(template_match_rst, threshold_rst)
beat_samples_rlx = p3m.predict_beat_times(template_match_rlx, threshold_rlx)
beat_samples_ms = p3m.predict_beat_times(template_match_ms, threshold_ms)
beat_samples_ws = p3m.predict_beat_times(template_match_ws, threshold_ws)

# Plot detected beats on top of template match REST
plt.figure(11, clear=True)
plt.subplot(2,2,1)
plt.plot(template_match_time_rst, template_match_rst, label="Normal Template Match")
plt.scatter(decimated_time_rst[beat_samples_rst], template_match_rst[beat_samples_rst], color='orange', marker='^', label='N (predicted)')
plt.xlabel("Time (s)")
plt.ylabel("Template Match Units (1/V)")
plt.xlim(0,5)
plt.title("Detected Beats in Template Match of  Rest Data ")
plt.legend()

# Plot relax 
plt.subplot(2,2,2)
plt.plot(template_match_time_rlx, template_match_rlx, label="Normal Template Match")
plt.scatter(decimated_time_rlx[beat_samples_rlx], template_match_rlx[beat_samples_rlx], color='orange', marker='^', label='N (predicted)')
plt.xlabel("Time (s)")
plt.ylabel("Template Match Units (1/V)")
plt.xlim(2,5)
plt.title("Detected Beats in Template Match of Relax Data ")
plt.legend()

# plot mentalstress 
plt.subplot(2,2,3)
plt.plot(template_match_time_ms, template_match_ms, label="Normal Template Match")
plt.scatter(decimated_time_ms[beat_samples_ms], template_match_ms[beat_samples_ms], color='orange', marker='^', label='N (predicted)')
plt.xlabel("Time (s)")
plt.ylabel("Template Match Units (1/V)")
plt.xlim(0,5)
plt.title("Detected Beats in Template Match of Mental Stress Data ")
plt.legend()

# plot wallsit 
plt.subplot(2,2,4)
plt.plot(template_match_time_ws, template_match_ws, label="Normal Template Match")
plt.scatter(decimated_time_ws[beat_samples_ws], template_match_ws[beat_samples_ws], color='orange', marker='^', label='N (predicted)')
plt.xlabel("Time (s)")
plt.ylabel("Template Match Units (1/V)")
plt.xlim(0,5)
plt.title("Detected Beats in Template Match of Wallsit Data ")
plt.legend()

plt.tight_layout()
#%% Part 4: 
# Define the interpolated timecourse (dt = 0.1 seconds)
dt = 0.1  # Interpolation interval

# beats in prev graphs 
beats_rest = np.array(decimated_time_rst[beat_samples_rst])
beats_wallsit = np.array(decimated_time_ws[beat_samples_ws])
beats_mentalstress = np.array(decimated_time_ms[beat_samples_ms])
beats_relax = np.array(decimated_time_rlx[beat_samples_rlx])

# ibi_rest, hrv_rest = p3m.calculate_hrv(beat_samples_rst, fs)
# ibi_relax, hrv_relax = p3m.calculate_hrv(beat_samples_rlx, fs)
# ibi_wallsit, hrv_wallsit = p3m.calculate_hrv(beat_samples_ws, fs)
# ibi_mentalstress, hrv_mentalstress = p3m.calculate_hrv(beat_samples_ms, fs)

ibi_rest, hrv_rest = p3m.calculate_hrv(beats_rest, fs)
ibi_relax, hrv_relax = p3m.calculate_hrv(beats_relax, fs)
ibi_wallsit, hrv_wallsit = p3m.calculate_hrv(beats_wallsit, fs)
ibi_mentalstress, hrv_mentalstress = p3m.calculate_hrv(beats_mentalstress, fs)

# List of HRV values
hrv_values = [hrv_rest, hrv_relax, hrv_wallsit, hrv_mentalstress]
activities = ['Rest', 'Relax', 'Wall Sit', 'Mental Stress']

# Plotting the bar graph
plt.figure(17, clear = True) 
plt.bar(activities, hrv_values, color=['blue', 'green', 'pink', 'orange'])
plt.xlabel('Activity')
plt.ylabel('HRV (ms)')
plt.title('Heart Rate Variability (HRV) for Different Activities')
plt.grid()

# calc interp timecourse 
interp_time_rest, interp_ibi_rest = p3m.interp_timecourse(beats_rest, ibi_rest, fs, dt)
interp_time_relax, interp_ibi_relax = p3m.interp_timecourse(beats_relax, ibi_relax, fs, dt)
interp_time_wallsit, interp_ibi_wallsit = p3m.interp_timecourse(beats_wallsit, ibi_wallsit, fs, dt)
interp_time_mentalstress, interp_ibi_mentalstress = p3m.interp_timecourse(beats_mentalstress, ibi_mentalstress, fs, dt)


