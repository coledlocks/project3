#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Dec  3 10:44:58 2024

@author: coledlocks
"""

# importing related packages
import project3_module as p3m
import numpy as np
from matplotlib import pyplot as plt

#%% Part 1 

fs = 500 # sampling rate

# loading the data
rest_data, rest_time = p3m.load_data('rest.txt', fs)
relax_data, relax_time = p3m.load_data('relax.txt', fs)
mentalstress_data, mentalstress_time = p3m.load_data('mentalstress.txt', fs)
wallsit_data, wallsit_time = p3m.load_data('wallsit.txt', fs)

# trimming the data to 5 seconds
rest_data = p3m.trim_data_to_5_seconds(rest_data)
rest_time = p3m.trim_data_to_5_seconds(rest_time)

relax_data = p3m.trim_data_to_5_seconds(relax_data)
relax_time = p3m.trim_data_to_5_seconds(relax_time)

mentalstress_data = p3m.trim_data_to_5_seconds(mentalstress_data)
mentalstress_time = p3m.trim_data_to_5_seconds(mentalstress_time)

wallsit_data = p3m.trim_data_to_5_seconds(wallsit_data)
wallsit_time = p3m.trim_data_to_5_seconds(wallsit_time)

# concatenating the data
total_data = np.concatenate((rest_data, relax_data, mentalstress_data, wallsit_data))
total_time = np.arange(0, len(total_data)/fs, 1/fs)

# Plots 
plt.figure(1, clear = True) 
plt.plot(rest_time, rest_data)

plt.figure(2, clear = True) 
plt.plot(relax_time, relax_data)

plt.figure(3, clear = True )
plt.plot(mentalstress_time, mentalstress_data)

plt.figure(4, clear = True) 
plt.plot(wallsit_time, wallsit_data)

plt.figure(5, clear = True)
plt.plot(total_time, total_data)

#%% PART 2: FILTERING

# declare filter parameters
numtaps = 500
cutoff_frequency = (0.5, 47.5)
window = 'hann'
filter_type = 'bandpass'

# get filter coefficients 
h_t = signal.firwin(numtaps, cutoff_frequency, window=window, pass_zero=filter_type, fs=fs)
t_filter = np.arange(0, len(h_t)/fs, 1/fs)
H_f = np.fft.rfft(h_t)
f_filter = np.fft.rfftfreq(len(h_t), 1/fs)

# demean data and apply filter
rest_data_demeaned = rest_data - np.mean(rest_data)
filtered_rest = np.convolve(rest_data_demeaned, h_t, mode='same')

relax_data_demeaned = relax_data - np.mean(relax_data)
filtered_relax = np.convolve(relax_data_demeaned, h_t, mode='same')

mentalstress_data_demeaned = mentalstress_data - np.mean(mentalstress_data)
filtered_mentalstress = np.convolve(mentalstress_data_demeaned, h_t, mode='same')

wallsit_data_demeaned = wallsit_data - np.mean(wallsit_data)
filtered_wallsit = np.convolve(wallsit_data_demeaned, h_t, mode='same')

# converting raw data to freq 
rest_freq = np.fft.rfft(rest_data_demeaned)
f = np.fft.rfftfreq(len(rest_data),1/fs)

# plotting
plt.figure(1, clear=True)

# raw data in time domain
plt.subplot(321)
plt.plot(rest_time, rest_data_demeaned)
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')
plt.title('Raw Data (Demeaned)')

# raw data in frequency domain
plt.subplot(322)
plt.plot(f, np.abs(rest_freq))
plt.xlabel('Frequency (Hz)')
plt.ylabel('Magnitude')
plt.title('Signal in Frequency Domain')

# filter in time domain
plt.subplot(323)
plt.plot(t_filter, h_t)
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')
plt.title('Impulse Response')

# filter in frequency domain
plt.subplot(324)
plt.plot(f_filter, np.abs(H_f))
plt.xlabel('Frequency (Hz)')
plt.ylabel('Magnitude')
plt.title('Frequency Response')

# filtered data in time domain
plt.subplot(325)
plt.plot(rest_time, filtered_rest, color='orange')
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')
plt.title('Filtered Data')

plt.tight_layout()
plt.show()

#%% PART 3: DETECT HEARTBEATS

# Define start and end points of template 
start_index = 2 # Start index of the segment
end_index = 3 # End index of the segment

# wallsit index
start_index_ws = 6
end_index_ws = 7

# Extract a segment to be used as the template
template_rst = filtered_rest[start_index:end_index]
template_rlx = filtered_relax[start_index:end_index]
template_ms = filtered_mentalstress[start_index:end_index]
template_ws = filtered_wallsit[start_index_ws:end_index_ws]

# time 
time_rst = np.arange(0, len(filtered_rest)) / fs
time_rlx = np.arange(0, len(filtered_relax)) / fs
time_ws = np.arange(0, len(filtered_wallsit)) / fs
time_ms = np.arange(0, len(filtered_mentalstress)) / fs

# Find cross-correlation between raw signal and normal beat template 
template_match_rst = p3m.get_template_match(filtered_rest, template_rst)
template_match_time_rst = np.arange(0, len(template_match_rst))/(fs)

template_match_rlx = p3m.get_template_match(filtered_relax, template_rlx)
template_match_time_rlx = np.arange(0, len(template_match_rlx))/(fs)

template_match_ms = p3m.get_template_match(filtered_mentalstress, template_ms)
template_match_time_ms = np.arange(0, len(template_match_ms))/(fs)

template_match_ws = p3m.get_template_match(filtered_wallsit, template_ws)
template_match_time_ws = np.arange(0, len(template_match_ws))/(fs)

# set threshold 
threshold_rst = .04
threshold_rlx = .099
threshold_ms = .004
threshold_ws = .04

beat_samples_rst = p3m.predict_beat_times(template_match_rst, threshold_rst)
beat_samples_rlx = p3m.predict_beat_times(template_match_rlx, threshold_rlx)
beat_samples_ms = p3m.predict_beat_times(template_match_ms, threshold_ms)
beat_samples_ws = p3m.predict_beat_times(template_match_ws, threshold_ws)

# Plot detected beats on top of template match REST
plt.figure(11, clear=True)
plt.subplot(2,2,1)
plt.plot(template_match_time_rst, template_match_rst, label="Normal Template Match")
plt.scatter(time_rst[beat_samples_rst], template_match_rst[beat_samples_rst], color='orange', marker='^', label='N (predicted)')
plt.xlabel("Time (s)")
plt.ylabel("Template Match Units (1/V)")
plt.xlim(0,5)
plt.title("Detected Beats in Template Match of  Rest Data ")
plt.legend()

# Plot relax 
plt.subplot(2,2,2)
plt.plot(template_match_time_rlx, template_match_rlx, label="Normal Template Match")
plt.scatter(time_rlx[beat_samples_rlx], template_match_rlx[beat_samples_rlx], color='orange', marker='^', label='N (predicted)')
plt.xlabel("Time (s)")
plt.ylabel("Template Match Units (1/V)")
plt.xlim(2,5)
plt.title("Detected Beats in Template Match of Relax Data ")
plt.legend()

# plot mentalstress 
plt.subplot(2,2,3)
plt.plot(template_match_time_ms, template_match_ms, label="Normal Template Match")
plt.scatter(time_ms[beat_samples_ms], template_match_ms[beat_samples_ms], color='orange', marker='^', label='N (predicted)')
plt.xlabel("Time (s)")
plt.ylabel("Template Match Units (1/V)")
plt.xlim(0,5)
plt.title("Detected Beats in Template Match of Mental Stress Data ")
plt.legend()

# plot wallsit 
plt.subplot(2,2,4)
plt.plot(template_match_time_ws, template_match_ws, label="Normal Template Match")
plt.scatter(time_ws[beat_samples_ws], template_match_ws[beat_samples_ws], color='orange', marker='^', label='N (predicted)')
plt.xlabel("Time (s)")
plt.ylabel("Template Match Units (1/V)")
plt.xlim(5,10)
plt.title("Detected Beats in Template Match of Wallsit Data ")
plt.legend()

plt.tight_layout()

#%% PART 4: CALCULATE HEART RATE VARIABILITY 
dt = 0.1 
# beats in prev graphs TIMES (x vals )
beats_rest = time_rst[beat_samples_rst] 
beats_wallsit = time_ws[beat_samples_ws]
beats_mentalstress = time_ms[beat_samples_ms]
beats_relax = time_rlx[beat_samples_rlx]

IBI_rst_new, interp_rst_new, hrv_rst_new = p3m.calculate_hrv(beats_rest, 0.1)
IBI_ws_new, interp_ws_new, hrv_ws_new = p3m.calculate_hrv(beats_wallsit, 0.1)
IBI_ms_new, interp_ms_new, hrv_ms_new = p3m.calculate_hrv(beats_mentalstress, 0.1)
IBI_rlx_new, interp_rlx_new, hrv_rlx_new = p3m.calculate_hrv(beats_relax, 0.1)

hrv_values = [hrv_rst_new, hrv_ws_new, hrv_ms_new, hrv_rlx_new]
activities = ['Rest', 'Wall Sit', 'Mental Stress', 'Relax']

# Create a bar plot
plt.figure(16, clear = True)
plt.bar(activities, hrv_values, color=['blue', 'green', 'pink', 'purple'])
plt.xlabel('Activity')
plt.ylabel('HRV Value (s)')
plt.title('HRV Values for Different Activities')
plt.grid()
