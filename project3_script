#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Dec  3 10:44:58 2024

@author: coledlocks
"""

# importing related packages
import project3_module as p3m
import numpy as np
from matplotlib import pyplot as plt

#%% Part 1 

fs = 500 # sampling rate

# loading the data
rest_data, rest_time = p3m.load_data('rest.txt', fs)
relax_data, relax_time = p3m.load_data('relax.txt', fs)
mentalstress_data, mentalstress_time = p3m.load_data('mentalstress.txt', fs)
wallsit_data, wallsit_time = p3m.load_data('wallsit.txt', fs)

# trimming the data to 5 seconds
rest_data = p3m.trim_data_to_5_seconds(rest_data)
rest_time = p3m.trim_data_to_5_seconds(rest_time)

relax_data = p3m.trim_data_to_5_seconds(relax_data)
relax_time = p3m.trim_data_to_5_seconds(relax_time)

mentalstress_data = p3m.trim_data_to_5_seconds(mentalstress_data)
mentalstress_time = p3m.trim_data_to_5_seconds(mentalstress_time)

wallsit_data = p3m.trim_data_to_5_seconds(wallsit_data)
wallsit_time = p3m.trim_data_to_5_seconds(wallsit_time)

# concatenating the data
total_data = np.concatenate((rest_data, relax_data, mentalstress_data, wallsit_data))
total_time = np.arange(0, len(total_data)/fs, 1/fs)

# Plots 
plt.figure(1, clear = True) 
plt.plot(rest_time, rest_data)

plt.figure(2, clear = True) 
plt.plot(relax_time, relax_data)

plt.figure(3, clear = True )
plt.plot(mentalstress_time, mentalstress_data)

plt.figure(4, clear = True) 
plt.plot(wallsit_time, wallsit_data)

plt.figure(5, clear = True)
plt.plot(total_time, total_data)

#%% PART 2: FILTERING

# declare filter parameters
numtaps = 500
cutoff_frequency = (0.5, 47.5)
window = 'hann'
filter_type = 'bandpass'

# get filter coefficients 
h_t = signal.firwin(numtaps, cutoff_frequency, window=window, pass_zero=filter_type, fs=fs)
t_filter = np.arange(0, len(h_t)/fs, 1/fs)
H_f = np.fft.rfft(h_t)
f_filter = np.fft.rfftfreq(len(h_t), 1/fs)

# demean data and apply filter
rest_data_demeaned = rest_data - np.mean(rest_data)
filtered_rest = np.convolve(rest_data_demeaned, h_t, mode='same')

# converting raw data to freq 
rest_freq = np.fft.rfft(rest_data_demeaned)
f = np.fft.rfftfreq(len(rest_data),1/fs)

# plotting
plt.figure(1, clear=True)

# raw data in time domain
plt.subplot(321)
plt.plot(rest_time, rest_data_demeaned)
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')
plt.title('Raw Data (Demeaned)')

# raw data in frequency domain
plt.subplot(322)
plt.plot(f, np.abs(rest_freq))
plt.xlabel('Frequency (Hz)')
plt.ylabel('Magnitude')
plt.title('Signal in Frequency Domain')

# filter in time domain
plt.subplot(323)
plt.plot(t_filter, h_t)
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')
plt.title('Impulse Response')

# filter in frequency domain
plt.subplot(324)
plt.plot(f_filter, np.abs(H_f))
plt.xlabel('Frequency (Hz)')
plt.ylabel('Magnitude')
plt.title('Frequency Response')

# filtered data in time domain
plt.subplot(325)
plt.plot(rest_time, filtered_rest, color='orange')
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')
plt.title('Filtered Data')

plt.tight_layout()
plt.show()
