#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Dec  3 10:44:58 2024

@author: coledlocks
"""

# importing related packages
import project3_module as p3m
import numpy as np
from matplotlib import pyplot as plt

#%% Part 1 

fs = 500 # sampling rate

# loading the data
rest_data, rest_time = p3m.load_data('rest.txt', fs)
relax_data, relax_time = p3m.load_data('relax.txt', fs)
mentalstress_data, mentalstress_time = p3m.load_data('mentalstress.txt', fs)
wallsit_data, wallsit_time = p3m.load_data('wallsit.txt', fs)

# trimming the data to 5 seconds
rest_data = p3m.trim_data_to_5_seconds(rest_data)
rest_time = p3m.trim_data_to_5_seconds(rest_time)

relax_data = p3m.trim_data_to_5_seconds(relax_data)
relax_time = p3m.trim_data_to_5_seconds(relax_time)

mentalstress_data = p3m.trim_data_to_5_seconds(mentalstress_data)
mentalstress_time = p3m.trim_data_to_5_seconds(mentalstress_time)

wallsit_data = p3m.trim_data_to_5_seconds(wallsit_data)
wallsit_time = p3m.trim_data_to_5_seconds(wallsit_time)

# concatenating the data
total_data = np.concatenate((rest_data, relax_data, mentalstress_data, wallsit_data))
total_time = np.arange(0, len(total_data)/fs, 1/fs)

# Plots 
plt.figure(1, clear = True) 
plt.plot(rest_time, rest_data)

plt.figure(2, clear = True) 
plt.plot(relax_time, relax_data)

plt.figure(3, clear = True )
plt.plot(mentalstress_time, mentalstress_data)

plt.figure(4, clear = True) 
plt.plot(wallsit_time, wallsit_data)

plt.figure(5, clear = True)
plt.plot(total_time, total_data)
#%% Part 2 

# declare filter parameters
order = 4 #above this the cutoffs look weird
cutoff_frequency = (0.5,20)
window = 'hann'
filter_type = 'bandpass'

# filter coefficients 
h_t = signal.firwin(order, cutoff_frequency, window=window, pass_zero=filter_type, fs=fs)
t_filter = np.arange(0, len(h_t)/fs,1/fs)

plt.figure(6, clear=True)
plt.plot(t_filter, h_t)
plt.title('Band-pass Filter')

# Design the Butterworth band-pass filter
b, a = signal.butter(order, cutoff_frequency, btype='bandpass', fs=fs)

# Apply the filter using filtfilt 
filtered_rest = signal.filtfilt(b, a, plot_rest_data)
filtered_mentalstress = signal.filtfilt(b, a, plot_mentalstress_data)
filtered_wallsit = signal.filtfilt(b, a, plot_wallsit_data)
filtered_relax = signal.filtfilt(b, a, plot_relax_data)

# FREQUENCY response 
# Compute the frequency response
w, h = signal.freqz(b, a)
# plot frequency response 
plt.figure(7, clear=True)
plt.plot(w, np.abs(h))
plt.title('Frequency Response of the Butterworth Band-Pass Filter')
plt.xlabel('Frequency')
plt.ylabel('Magnitude')

# Impulse Response 
# product a plot of the filters impulse response and frequency response 
impulse = np.zeros(500)  # 500 samples
impulse[0] = 1  # Delta function (impulse at t=0)

# Apply the filter to the impulse signal
impulse_response = signal.lfilter(b, a, impulse)

# Create a time vector corresponding to the impulse response
impulse_time = np.arange(0, len(impulse_response)) / fs  # Time in seconds
# Plot the impulse response
plt.figure(8, clear = True )
plt.plot(impulse_time, impulse_response, color='blue')
plt.title('Impulse Response of the Butterworth Band-Pass Filter')

#%%

# Plot original and filtered signals 
"i dont think we need all of these lol so we can take some out eventually "
"also the filter just smooths everything out but to see it you need to zoom in a little, idk if its perfect we can always change it"
plt.figure(7, clear=True)
plt.subplot(4,2,1)
plt.plot(plot_rest_time, plot_rest_data, color = 'blue')
plt.title('Original Rest Signal')
plt.subplot(4,2,2)
plt.plot(plot_rest_time, filtered_rest, color = 'green')
plt.title('Filtered Rest Signal')

plt.subplot(4,2,3)
plt.plot(plot_mentalstress_time, plot_mentalstress_data, color = 'blue')
plt.title('Original Mental Stress Signal')
plt.subplot(4,2,4)
plt.plot(plot_mentalstress_time, filtered_mentalstress, color = 'green')
plt.title('Filtered Mental Stress Signal')

plt.subplot(4,2,5)
plt.plot(plot_wallsit_time, plot_wallsit_data, color = 'blue')
plt.title('Original Wallsit Signal')
plt.subplot(4,2,6)
plt.plot(plot_wallsit_time, filtered_wallsit, color = 'green')
plt.title('Filtered Wallsit Signal')

plt.subplot(4,2,7)
plt.plot(plot_relax_time, plot_relax_data, color = 'blue')
plt.title('Original Relax Signal')
plt.subplot(4,2,8)
plt.plot(plot_relax_time, filtered_relax, color = 'green')
plt.title('Filtered Relax Signal')

plt.tight_layout()



#%% Part 3 
