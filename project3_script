#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
project3_script
This script builds code to load data, trim data, filter noisy ECG signals, detect heartbeats in the signals using template matching, calculating HRV and IBI of the signals, and calculating the HRV frequency band power. 
Authors: Cole Drozdek and Jillian Griffith 
"""

# importing related packages
import project3_module as p3m
import numpy as np
from matplotlib import pyplot as plt

#%% PART 1: COLLECT & LOAD DATA

fs = 500 # sampling rate 
# load data 
rest_data, rest_time = p3m.load_data('rest.txt', 500)
relax_data, relax_time = p3m.load_data('relax.txt', 500) #should we try to cut off the first few seconds 
mentalstress_data, mentalstress_time = p3m.load_data('mentalstress.txt', 500)
wallsit_data, wallsit_time = p3m.load_data('wallsit.txt', 500)

# Trim data 
plot_rest_time = p3m.trim_data(rest_time)
plot_rest_data = p3m.trim_data(rest_data)

plot_relax_time = p3m.trim_data(relax_time)
plot_relax_data = p3m.trim_data(relax_data)

plot_mentalstress_time = p3m.trim_data(mentalstress_time)
plot_mentalstress_data = p3m.trim_data(mentalstress_data)

plot_wallsit_time = p3m.trim_data(wallsit_time)
plot_wallsit_data = p3m.trim_data(wallsit_data)

# Plots 
plt.figure(1, clear = True)
plt.title('Trimmed Data')
plt.subplot(2,2,1)
plt.plot(plot_rest_time, plot_rest_data)
plt.title('Rest Data')
plt.xlabel('Time(s)')
plt.ylabel('Voltage (V)')

plt.subplot(2,2,2)
plt.plot(plot_relax_time, plot_relax_data)
plt.title('Relax Data')
plt.xlabel('Time(s)')
plt.ylabel('Voltage (V)')

plt.subplot(2,2,3)
plt.plot(plot_mentalstress_time, plot_mentalstress_data)
plt.title('Mental Stress Data')
plt.xlabel('Time(s)')
plt.ylabel('Voltage (?)')

plt.subplot(2,2,4)
plt.plot(plot_wallsit_time, plot_wallsit_data)
plt.title('Wallsit Data')
plt.xlabel('Time(s)')
plt.ylabel('Voltage (V)')

plt.tight_layout()

# Save figure 
plt.savefig('trimmed_data.pdf', format='pdf')

plt.figure(2, clear = True)
total_data = np.concatenate((plot_rest_data, plot_relax_data, plot_mentalstress_data, plot_wallsit_data))
total_time = np.arange(0, len(total_data)/fs, 1/fs)
plt.plot(total_time, total_data)
plt.title('All Data')
plt.xlabel('Time(s)')
plt.ylabel('Voltage (V)')

# Save figure 
plt.savefig('original_vs_decimated_signal.pdf', format='pdf')
plt.show()

#%% PART 2: FILTERING

fs = 500 # sampling rate

# declare filter parameters
numtaps = 500
cutoff_frequency = (0.5, 47.5)
window = 'hann'
filter_type = 'bandpass'


# apply the filter to all of the raw data
filtered_rest = p3m.filter_data(numtaps, cutoff_frequency, window, filter_type, fs, rest_data, rest_time, 'filtered_rest')
filtered_relax = p3m.filter_data(numtaps, cutoff_frequency, window, filter_type, fs, relax_data, relax_time, 'filtered_relax')
filtered_mentalstress = p3m.filter_data(numtaps, cutoff_frequency, window, filter_type, fs, mentalstress_data, mentalstress_time, 'filtered_mentalstress')
filtered_wallsit = p3m.filter_data(numtaps, cutoff_frequency, window, filter_type, fs, wallsit_data, wallsit_time, 'filtered_wallsit')


#%% PART 3: DETECT HEARTBEATS

# Define start and end points of template 
start_index = 2 # Start index of the segment
end_index = 3 # End index of the segment

# wallsit index
start_index_ws = 6
end_index_ws = 7

# Extract a segment to be used as the template
template_rst = filtered_rest[start_index:end_index]
template_rlx = filtered_relax[start_index:end_index]
template_ms = filtered_mentalstress[start_index:end_index]
template_ws = filtered_wallsit[start_index_ws:end_index_ws]

# time 
time_rst = np.arange(0, len(filtered_rest)) / fs
time_rlx = np.arange(0, len(filtered_relax)) / fs
time_ws = np.arange(0, len(filtered_wallsit)) / fs
time_ms = np.arange(0, len(filtered_mentalstress)) / fs

# Find cross-correlation between raw signal and normal beat template 
template_match_rst = p3m.get_template_match(filtered_rest, template_rst)
template_match_time_rst = np.arange(0, len(template_match_rst))/(fs)

template_match_rlx = p3m.get_template_match(filtered_relax, template_rlx)
template_match_time_rlx = np.arange(0, len(template_match_rlx))/(fs)

template_match_ms = p3m.get_template_match(filtered_mentalstress, template_ms)
template_match_time_ms = np.arange(0, len(template_match_ms))/(fs)

template_match_ws = p3m.get_template_match(filtered_wallsit, template_ws)
template_match_time_ws = np.arange(0, len(template_match_ws))/(fs)

# set threshold 
threshold_rst = .04
threshold_rlx = .099
threshold_ms = .004
threshold_ws = .04

beat_samples_rst = p3m.predict_beat_times(template_match_rst, threshold_rst)
beat_samples_rlx = p3m.predict_beat_times(template_match_rlx, threshold_rlx)
beat_samples_ms = p3m.predict_beat_times(template_match_ms, threshold_ms)
beat_samples_ws = p3m.predict_beat_times(template_match_ws, threshold_ws)

# Plot detected beats on top of template match REST
plt.figure(4, clear=True)
plt.title("Heart Beat Detection")

plt.subplot(2,2,1)
plt.plot(template_match_time_rst, template_match_rst, label="Normal Template Match")
plt.scatter(time_rst[beat_samples_rst], template_match_rst[beat_samples_rst], color='orange', marker='^', label='N (predicted)')
plt.xlabel("Time (s)")
plt.ylabel("Template Match Units (1/V)")
plt.xlim(0,5)
plt.title("Detected Beats in Template Match of  Rest Data ")
plt.legend()

# Plot relax 
plt.subplot(2,2,2)
plt.plot(template_match_time_rlx, template_match_rlx, label="Normal Template Match")
plt.scatter(time_rlx[beat_samples_rlx], template_match_rlx[beat_samples_rlx], color='orange', marker='^', label='N (predicted)')
plt.xlabel("Time (s)")
plt.ylabel("Template Match Units (1/V)")
plt.xlim(2,5)
plt.title("Detected Beats in Template Match of Relax Data ")
plt.legend()

# plot mentalstress 
plt.subplot(2,2,3)
plt.plot(template_match_time_ms, template_match_ms, label="Normal Template Match")
plt.scatter(time_ms[beat_samples_ms], template_match_ms[beat_samples_ms], color='orange', marker='^', label='N (predicted)')
plt.xlabel("Time (s)")
plt.ylabel("Template Match Units (1/V)")
plt.xlim(0,5)
plt.title("Detected Beats in Template Match of Mental Stress Data ")
plt.legend()

# plot wallsit 
plt.subplot(2,2,4)
plt.plot(template_match_time_ws, template_match_ws, label="Normal Template Match")
plt.scatter(time_ws[beat_samples_ws], template_match_ws[beat_samples_ws], color='orange', marker='^', label='N (predicted)')
plt.xlabel("Time (s)")
plt.ylabel("Template Match Units (1/V)")
plt.xlim(5,10)
plt.title("Detected Beats in Template Match of Wallsit Data ")
plt.legend()

plt.tight_layout()

# Save figure 
plt.savefig('heart_beat_detection.pdf', format='pdf')
plt.show()

#%% PART 4: CALCULATE HEART RATE VARIABILITY 
dt = 0.1 
# beats in prev graphs TIMES (x vals )
beats_rest = time_rst[beat_samples_rst] 
beats_wallsit = time_ws[beat_samples_ws]
beats_mentalstress = time_ms[beat_samples_ms]
beats_relax = time_rlx[beat_samples_rlx]

IBI_rst, interp_rst, hrv_rst = p3m.calculate_hrv(beats_rest, 0.1)
IBI_ws, interp_ws, hrv_ws = p3m.calculate_hrv(beats_wallsit, 0.1)
IBI_ms, interp_ms, hrv_ms = p3m.calculate_hrv(beats_mentalstress, 0.1)
IBI_rlx, interp_rlx, hrv_rlx = p3m.calculate_hrv(beats_relax, 0.1)

hrv_values = [hrv_rst, hrv_ws, hrv_ms, hrv_rlx]
activities = ['Rest', 'Wall Sit', 'Mental Stress', 'Relax']

# Create a bar plot
plt.figure(5, clear = True)
plt.bar(activities, hrv_values, color=['blue', 'green', 'pink', 'purple'])
plt.xlabel('Activity')
plt.ylabel('HRV Value (s)')
plt.title('HRV Values for Different Activities')
plt.grid()

# Save figure 
plt.savefig('hrv_values_for_different_activities.pdf', format='pdf')
plt.show()

#%% PART 5: GET HRV FREQUENCY BAND POWER

# sampling frequency from the linear interpolation
fs = 1/dt

# calculating the power ratios and extracting data for plotting/graphing
power_ratio_rst, freq_low_rst, freq_high_rst, power_low_rst, power_high_rst = p3m.calculate_ratio(interp_rst, fs)
power_ratio_rlx, freq_low_rlx, freq_high_rlx, power_low_rlx, power_high_rlx = p3m.calculate_ratio(interp_rlx, fs)
power_ratio_ms, freq_low_ms, freq_high_ms, power_low_ms, power_high_ms = p3m.calculate_ratio(interp_ms, fs)
power_ratio_ws, freq_low_ws, freq_high_ws, power_low_ws, power_high_ws = p3m.calculate_ratio(interp_ws, fs)

# plotting the LF and HF bands for each of the activities
plt.figure(6, clear=True)

# resting magnitude
plt.subplot(221)
plt.fill_between(freq_low_rst, power_low_rst, color = 'orange', label = 'LF Band', alpha = 0.5)
plt.fill_between(freq_high_rst, power_high_rst, label = 'HF Band', alpha = 0.5)
plt.xlabel('Frequency (Hz)')
plt.ylabel('Power')
plt.title('Rest')
plt.xlim(0.04, 0.4)
plt.grid()
plt.legend()

# relaxing magnitude
plt.subplot(222)
plt.fill_between(freq_low_rlx, power_low_rlx, color = 'orange', label = 'LF Band', alpha = 0.5)
plt.fill_between(freq_high_rlx, power_high_rlx, label = 'HF Band', alpha = 0.5)
plt.xlabel('Frequency (Hz)')
plt.ylabel('Power')
plt.title('Relax')
plt.xlim(0.04, 0.4)
plt.grid()
plt.legend()

# mental stress magnitude
plt.subplot(223)
plt.fill_between(freq_low_ms, power_low_ms, color = 'orange', label = 'LF Band', alpha = 0.5)
plt.fill_between(freq_high_ms, power_high_ms, label = 'HF Band', alpha = 0.5)
plt.xlabel('Frequency (Hz)')
plt.ylabel('Power')
plt.title('Mental Stress')
plt.xlim(0.04, 0.4)
plt.grid()
plt.legend()

# wallsit magnitude
plt.subplot(224)
plt.fill_between(freq_low_ws, power_low_ws, color = 'orange', label = 'LF Band', alpha = 0.5)
plt.fill_between(freq_high_ws, power_high_ws, label = 'HF Band', alpha = 0.5)
plt.xlabel('Frequency (Hz)')
plt.ylabel('Power')
plt.title('Wallsit')
plt.xlim(0.04, 0.4)
plt.grid()
plt.legend()

plt.suptitle('Magnitudes of Activities')
plt.tight_layout()

# Save figure 
plt.savefig('magnitudes_of_different_activities.pdf', format='pdf')
plt.show()

# compiling a list of ratios for plotting
ratios = [power_ratio_rst, power_ratio_rlx, power_ratio_ms, power_ratio_ws] # testing if the resting ratio is working

# creating bar graph of ratios
plt.figure(7, clear=True)
plt.bar(activities, ratios, color=['blue', 'green', 'pink', 'purple'])
plt.xlabel('Activity')
plt.ylabel('Power Ratio Value')
plt.title('Power Ratio Values for Different Activities')
plt.grid()

# Save figure 
plt.savefig('power_ratios_for_different_activities.pdf', format='pdf')
plt.show()














